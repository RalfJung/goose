package main

import (
	"bufio"
	"flag"
	"fmt"
	"os"
	"regexp"
	"strings"
)

const coqHeader string = `(* autogenerated by goose/cmd/test_gen *)
From Perennial.goose_lang Require Import prelude.
From Perennial.goose_lang Require Import ffi.disk_prelude.
From Perennial.goose_lang.interpreter Require Import test_config.

(* test functions *)
From Perennial.goose_lang.examples Require Import goose_semantics.

`

const goHeader string = `// autogenerated by goose/cmd/test_gen
package semantics

import (
	"testing"
	"github.com/stretchr/testify/suite"
)

type GoTestSuite struct{
	suite.Suite
}

`

const goFooter string = `func TestSuite(t *testing.T) {
    suite.Run(t, new(GoTestSuite))
}
`

func main() {

	flag.Usage = func() {
		fmt.Fprintln(flag.CommandLine.Output(), "Usage: test_gen [options] <path to go package>")

		flag.PrintDefaults()
	}

	var coqTest bool
	flag.BoolVar(&coqTest, "coq", false,
		"generate a .v test file from tests functions in input package")

	var goTest bool
	flag.BoolVar(&goTest, "go", false,
		"generate a .go test suite file from test functions in input package")

	var outFile string
	flag.StringVar(&outFile, "out", "-",
		"file to output to (use '-' for stdout)")

	flag.Parse()

	var t string
	if coqTest && !goTest {
		t = "coq"
	} else if !coqTest && goTest {
		t = "go"
	} else {
		fmt.Fprintln(os.Stderr, "must invoke either -coq or -go flag (but not both)")
		os.Exit(1)
	}

	// out file set up
	out := os.Stdout

	if outFile != "-" {
		var err error
		out, err = os.Create(outFile)
		if err != nil {
			fmt.Fprintln(os.Stderr, err.Error())
			fmt.Fprintln(os.Stderr, "could not write output")
			os.Exit(1)
		}
		defer out.Close()
	}

	// read files from input directory
	srcDir := flag.Arg(0)

	d, err := os.Open(srcDir)
	if err != nil {
		panic(err)
	}

	files, err := d.Readdir(-1)
	d.Close()
	if err != nil {
		panic(err)
	}

	if t == "coq" {
		fmt.Fprintf(out, coqHeader)

		for _, file := range files {

			// skip emacs back-up files
			if strings.HasSuffix(file.Name(), "~") {
				continue
			}

			f, err := os.Open(srcDir + file.Name())
			if err != nil {
				panic(err)
			}

			scanner := bufio.NewScanner(f)
			for scanner.Scan() {
				line := scanner.Text()

				re := regexp.MustCompile(`(?:^func\s)(?P<name>test[[:alnum:]]+)(?:\(.*)`)
				m := re.FindStringSubmatch(line)

				if len(m) != 0 {
					fmt.Fprintf(out, "Example %s_ok : %s #() ~~> #true := t.\n", m[1], m[1])
				}
			}
		}

	} else if t == "go" {
		fmt.Fprintf(out, goHeader)

		for _, file := range files {

			// skip emacs back-up files
			if strings.HasSuffix(file.Name(), "~") {
				continue
			}

			f, err := os.Open(srcDir + file.Name())
			if err != nil {
				panic(err)
			}

			scanner := bufio.NewScanner(f)
			for scanner.Scan() {
				line := scanner.Text()

				re := regexp.MustCompile(`(?:^func\s)(?:test)(?P<name>[[:alnum:]]+)(?:\(.*)`)
				m := re.FindStringSubmatch(line)

				if len(m) != 0 {
					fmt.Fprintf(out, "func (suite *GoTestSuite) Test%s() {\n", m[1])
					fmt.Fprintf(out, "\tsuite.Equal(true, test%s())\n", m[1])
					fmt.Fprintf(out, "}\n\n")
				}
			}
		}

		fmt.Fprintf(out, goFooter)

	} else {
		fmt.Fprintln(os.Stderr, "could not write output")
		os.Exit(1)
	}
}
