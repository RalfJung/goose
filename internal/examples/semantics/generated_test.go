// autogenerated by goose/cmd/test_gen
package semantics

import (
	"testing"
	"github.com/stretchr/testify/suite"
)

type GoTestSuite struct{
	suite.Suite
}

func (suite *GoTestSuite) TestCompareGT() {
	suite.Equal(true, testCompareGT())
}

func (suite *GoTestSuite) TestCompareGE() {
	suite.Equal(true, testCompareGE())
}

func (suite *GoTestSuite) TestCompareLT() {
	suite.Equal(true, testCompareLT())
}

func (suite *GoTestSuite) TestCompareLE() {
	suite.Equal(true, testCompareLE())
}

func (suite *GoTestSuite) TestEncDec32Simple() {
	suite.Equal(true, testEncDec32Simple())
}

func (suite *GoTestSuite) TestEncDec32() {
	suite.Equal(true, testEncDec32())
}

func (suite *GoTestSuite) TestEncDec64Simple() {
	suite.Equal(true, testEncDec64Simple())
}

func (suite *GoTestSuite) TestEncDec64() {
	suite.Equal(true, testEncDec64())
}

func (suite *GoTestSuite) TestFunctionOrdering() {
	suite.Equal(true, testFunctionOrdering())
}

func (suite *GoTestSuite) TestCopySimple() {
	suite.Equal(true, testCopySimple())
}

func (suite *GoTestSuite) TestCopyDifferentLengths() {
	suite.Equal(true, testCopyDifferentLengths())
}

func (suite *GoTestSuite) TestConversions() {
	suite.Equal(true, testConversions())
}

func (suite *GoTestSuite) TestShortcircuitAndTF() {
	suite.Equal(true, testShortcircuitAndTF())
}

func (suite *GoTestSuite) TestShortcircuitAndFT() {
	suite.Equal(true, testShortcircuitAndFT())
}

func (suite *GoTestSuite) TestShortcircuitOrTF() {
	suite.Equal(true, testShortcircuitOrTF())
}

func (suite *GoTestSuite) TestShortcircuitOrFT() {
	suite.Equal(true, testShortcircuitOrFT())
}

func (suite *GoTestSuite) TestReverseAssignOps64() {
	suite.Equal(true, testReverseAssignOps64())
}

func (suite *GoTestSuite) TestReverseAssignOps32() {
	suite.Equal(true, testReverseAssignOps32())
}

func (suite *GoTestSuite) TestAdd64Equals() {
	suite.Equal(true, testAdd64Equals())
}

func (suite *GoTestSuite) TestSub64Equals() {
	suite.Equal(true, testSub64Equals())
}

func (suite *GoTestSuite) TestStandardForLoop() {
	suite.Equal(true, testStandardForLoop())
}

func (suite *GoTestSuite) TestOverwriteArray() {
	suite.Equal(true, testOverwriteArray())
}

func TestSuite(t *testing.T) {
    suite.Run(t, new(GoTestSuite))
}
