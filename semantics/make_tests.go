package main

import (
	"bufio"
	"flag"
	"fmt"
	"os"
	"regexp"
)

const testHeader string = `(* autogenerated by semantics/make_tests.go *)
From Perennial.goose_lang.examples Require Import prelude.

(* disk FFI *)
From Perennial.goose_lang Require Import ffi.disk_prelude.

(* test functions *)
From Perennial.goose_lang.examples Require Import goose_unittest.

`

func main() {

	var outFile string
	flag.StringVar(&outFile, "out", "-",
		"file to output to (use '-' for stdout)")

	flag.Parse()

	file := flag.Arg(0)

	f, err := os.Open(file)
	if err != nil {
		panic(err)
	}

	out := os.Stdout

	if outFile != "-" {
		var err error
		out, err = os.Create(outFile)
		if err != nil {
			fmt.Fprintln(os.Stderr, err.Error())
			fmt.Fprintln(os.Stderr, "could not write output")
			os.Exit(1)
		}
		defer out.Close()
	}

	fmt.Fprintf(out, testHeader)

	scanner := bufio.NewScanner(f)
	for scanner.Scan() {
		line := scanner.Text()

		re := regexp.MustCompile(`(?:^func\s)(?P<name>test[[:alnum:]]+)(?:\(.*)`)
		m := re.FindStringSubmatch(line)

		if len(m) != 0 {
			fmt.Fprintf(out, "Example %s_ok := %s #() ~~> #true.\n", m[1], m[1])
		}
	}
}
